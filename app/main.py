from fastapi import FastAPI, Depends, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
import logging
from . import models, schemas, auth
from sqlalchemy.exc import IntegrityError

app = FastAPI(title="User Management API")

# Configure logging
logger = logging.getLogger("api")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# Create DB tables on startup
@app.on_event("startup")
def startup_event():
    models.Base.metadata.create_all(bind=models.engine)
    logger.info("Database tables created (if not exist)")

# Middleware to log requests
@app.middleware("http")
async def log_requests(request, call_next):
    logger.info(f"Incoming request: {request.method} {request.url.path}")
    response = await call_next(request)
    logger.info(f"Completed {request.method} {request.url.path} with status {response.status_code}")
    return response

# Health check endpoint (no auth needed)
@app.get("/health")
async def health():
    return {"status": "OK"}

# Authentication endpoint for obtaining token
@app.post("/token", response_model=schemas.Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    # For demo, accept a single hardcoded username/password
    if form_data.username == "admin" and form_data.password == "admin":
        access_token = auth.create_access_token({"sub": form_data.username})
        logger.info("Issued new token for user '%s'", form_data.username)
        return {"access_token": access_token, "token_type": "bearer"}
    logger.warning("Failed login attempt for user '%s'", form_data.username)
    raise HTTPException(status_code=401, detail="Incorrect username or password")

# Create user endpoint
@app.post("/users", response_model=schemas.UserRead, status_code=201, dependencies=[Depends(auth.get_current_user_token)])
def create_user(user: schemas.UserCreate, db=Depends(models.get_db)):
    # Create new user in DB
    new_user = models.User(name=user.name, address=user.address, phone=user.phone, national_id=user.national_id)
    try:
        db.add(new_user)
        db.commit()
        db.refresh(new_user)  # get autogenerated id
    except IntegrityError:
        db.rollback()
        logger.warning("Attempt to create a user with duplicate ID")
        raise HTTPException(status_code=400, detail="User with this ID already exists")
    logger.info(f"User created with ID {new_user.id}")
    return new_user

# Get specific user by ID
@app.get("/users/{user_id}", response_model=schemas.UserRead, dependencies=[Depends(auth.get_current_user_token)])
def get_user(user_id: int, db=Depends(models.get_db)):
    user = db.get(models.User, user_id)
    if not user:
        logger.warning(f"User id {user_id} not found")
        raise HTTPException(status_code=404, detail="User not found")
    logger.info(f"User id {user_id} retrieved")
    return user

# List all users' IDs
@app.get("/users", response_model=list[int], dependencies=[Depends(auth.get_current_user_token)])
def list_users(db=Depends(models.get_db)):
    users = db.query(models.User).all()
    ids = [user.id for user in users]
    logger.info(f"Listing all users IDs: {ids}")
    return ids
